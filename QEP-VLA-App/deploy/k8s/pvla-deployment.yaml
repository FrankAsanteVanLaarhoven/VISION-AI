# PVLA Navigation System - Kubernetes Deployment
# Production-ready deployment configuration for PVLA Navigation System

apiVersion: v1
kind: Namespace
metadata:
  name: pvla-navigation
  labels:
    name: pvla-navigation
    app: pvla-navigation-system

---
# ConfigMap for PVLA Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: pvla-config
  namespace: pvla-navigation
data:
  production.yaml: |
    # PVLA Production Configuration
    system_architecture:
      privacy_layer:
        encryption: "Lattice-based homomorphic encryption"
        privacy_budget:
          epsilon: 0.1
          delta: 1e-5
          max_queries: 100
      quantum_layer:
        qubit_count: 50
        error_correction: "Surface code"
        backend: "simulator"
      vision_processing:
        real_time_processing: "Sub-100ms latency requirement"
        input_resolution: [224, 224]
      language_processing:
        model: "bert-base-uncased"
        quantum_enhancement: true
      action_selection:
        ethical_framework: "utilitarian"
        safety_threshold: 0.7
    performance:
      latency:
        total_system: 100
      resource_limits:
        memory_usage: 4
    security:
      encryption:
        algorithm: "AES-256"
        quantum_safe: true
    monitoring:
      logging:
        level: "INFO"
        file: "/var/log/pvla/navigation.log"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: pvla-secrets
  namespace: pvla-navigation
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  jwt-secret: <base64-encoded-jwt-secret>
  db-password: <base64-encoded-db-password>
  redis-password: <base64-encoded-redis-password>
  ibmq-token: <base64-encoded-ibmq-token>
  google-project-id: <base64-encoded-google-project-id>

---
# Persistent Volume for model storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pvla-models-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: pvla-models
  hostPath:
    path: /var/lib/pvla/models

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvla-models-pvc
  namespace: pvla-navigation
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: pvla-models

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pvla-service-account
  namespace: pvla-navigation

---
# ClusterRole for PVLA system
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pvla-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "events", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors"]
  verbs: ["get", "create"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pvla-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pvla-cluster-role
subjects:
- kind: ServiceAccount
  name: pvla-service-account
  namespace: pvla-navigation

---
# Deployment for PVLA Navigation System
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pvla-navigation
  namespace: pvla-navigation
  labels:
    app: pvla-navigation
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: pvla-navigation
  template:
    metadata:
      labels:
        app: pvla-navigation
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pvla-service-account
      containers:
      - name: pvla-navigation
        image: pvla-navigation:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: QEP_VLA_ENV
          value: "production"
        - name: DB_HOST
          value: "postgresql-service"
        - name: DB_USERNAME
          value: "pvla_user"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pvla-secrets
              key: db-password
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pvla-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: pvla-secrets
              key: jwt-secret
        - name: IBMQ_TOKEN
          valueFrom:
            secretKeyRef:
              name: pvla-secrets
              key: ibmq-token
        - name: GOOGLE_PROJECT_ID
          valueFrom:
            secretKeyRef:
              name: pvla-secrets
              key: google-project-id
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
            nvidia.com/gpu: "1"
          limits:
            cpu: "4"
            memory: "8Gi"
            nvidia.com/gpu: "1"
        volumeMounts:
        - name: pvla-config
          mountPath: /app/config
        - name: pvla-models
          mountPath: /app/models
        - name: pvla-logs
          mountPath: /var/log/pvla
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: pvla-config
        configMap:
          name: pvla-config
      - name: pvla-models
        persistentVolumeClaim:
          claimName: pvla-models-pvc
      - name: pvla-logs
        emptyDir: {}
      nodeSelector:
        accelerator: nvidia-tesla-v100
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pvla-navigation-hpa
  namespace: pvla-navigation
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pvla-navigation
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Service for PVLA Navigation System
apiVersion: v1
kind: Service
metadata:
  name: pvla-navigation-service
  namespace: pvla-navigation
  labels:
    app: pvla-navigation
spec:
  type: LoadBalancer
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: pvla-navigation

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pvla-navigation-ingress
  namespace: pvla-navigation
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  tls:
  - hosts:
    - pvla-navigation.example.com
    secretName: pvla-tls-secret
  rules:
  - host: pvla-navigation.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pvla-navigation-service
            port:
              number: 8000

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: pvla-navigation-monitor
  namespace: pvla-navigation
  labels:
    app: pvla-navigation
spec:
  selector:
    matchLabels:
      app: pvla-navigation
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pvla-navigation-netpol
  namespace: pvla-navigation
spec:
  podSelector:
    matchLabels:
      app: pvla-navigation
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: pvla-navigation
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
